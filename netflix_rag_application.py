# -*- coding: utf-8 -*-
"""netflix_rag_application.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ffmtGCX-O2lFg93QM40MQnwBbySVpX77
"""

import pandas as pd
import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
from transformers import pipeline
import gradio as gr

# Load Data
def load_data():
    df = pd.read_csv("netflix_content_2023.csv")
    df['Hours Viewed'] = df['Hours Viewed'].replace(',', '', regex=True).astype(float)
    df['Release Date'] = pd.to_datetime(df['Release Date'])
    df['Doc'] = df.apply(
        lambda row: f"{row['Title']} is a {row['Content Type']} released on {row['Release Date'].date()}. It has {row['Hours Viewed']} hours viewed.",
        axis=1
    )
    return df

# Build FAISS index
def build_index(docs):
    model = SentenceTransformer("all-MiniLM-L6-v2")
    embeddings = model.encode(docs.tolist(), show_progress_bar=False).astype("float32")
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(embeddings)
    return model, index

# Load FLAN-T5
def load_rag_model():
    return pipeline("text2text-generation", model="google/flan-t5-small")

# Main RAG function
def ask_question_rag_generate(query, k):
    query_vec = bert_model.encode([query]).astype('float32')
    distances, indices = index.search(query_vec, k)

    results = data.iloc[indices[0]]
    top_matches = "\n\n".join([
        f"üì∫ {row['Title']} | {row['Content Type']} | {row['Release Date'].date()} | ‚è±Ô∏è {row['Hours Viewed']} hrs"
        for _, row in results.iterrows()
    ])

    combined_text = "Summarize: " + " ".join(results['Doc'].tolist())
    response = rag_pipeline(combined_text, max_length=100)[0]['generated_text']

    return f"üîé Top Matches:\n{top_matches}\n\nüß† Insight:\n{response}"

# Load resources (outside function to avoid reloading on every query)
data = load_data()
bert_model, index = build_index(data['Doc'])
rag_pipeline = load_rag_model()

# Gradio UI
interface = gr.Interface(
    fn=ask_question_rag_generate,
    inputs=[
        gr.Textbox(label="Ask a question about Netflix content (2023)"),
        gr.Slider(1, 10, value=3, label="Top K similar documents")
    ],
    outputs="text",
    title="üì∫ Netflix Insight Generator",
    description="Ask any question about 2023 Netflix content. This app uses FAISS, Sentence-BERT, and FLAN-T5 for RAG."
)

interface.launch()