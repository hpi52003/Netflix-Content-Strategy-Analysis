# -*- coding: utf-8 -*-
"""netflix_rag_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ffmtGCX-O2lFg93QM40MQnwBbySVpX77
"""

import streamlit as st
import pandas as pd
import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
from transformers import pipeline

# Load Data
@st.cache_data
def load_data():
    df = pd.read_csv("netflix_content_2023.csv")
    df['Hours Viewed'] = df['Hours Viewed'].replace(',', '', regex=True).astype(float)
    df['Release Date'] = pd.to_datetime(df['Release Date'])
    df['Doc'] = df.apply(
        lambda row: f"{row['Title']} is a {row['Content Type']} released on {row['Release Date'].date()}. It has {row['Hours Viewed']} hours viewed.",
        axis=1
    )
    return df

# Load Sentence-BERT and build FAISS index
@st.cache_resource
def build_index(df):
    bert_model = SentenceTransformer('all-MiniLM-L6-v2')
    doc_embeddings = bert_model.encode(df['Doc'].tolist(), show_progress_bar=False).astype('float32')
    index = faiss.IndexFlatL2(doc_embeddings.shape[1])
    index.add(doc_embeddings)
    return bert_model, index

# Load FLAN-T5-small model
@st.cache_resource
def load_rag_model():
    return pipeline("text2text-generation", model="google/flan-t5-small")

# QA function
def ask_question_rag_generate(query, k, df, index, bert_model, rag_pipeline):
    query_vec = bert_model.encode([query]).astype('float32')
    distances, indices = index.search(query_vec, k)

    results = df.iloc[indices[0]]
    st.subheader("üîé Top Matches")
    for i, row in results.iterrows():
        st.write(f"üì∫ {row['Title']} | {row['Content Type']} | {row['Release Date'].date()} | ‚è±Ô∏è {row['Hours Viewed']} hrs")

    combined_text = "Summarize: " + " ".join(results['Doc'].tolist())
    response = rag_pipeline(combined_text, max_length=100)[0]['generated_text']

    st.subheader("üß† Generated Insight")
    st.write(response)

# Streamlit UI
st.set_page_config(page_title="Netflix RAG", layout="centered")
st.title("üì∫ Netflix Insight Generator")

data = load_data()
bert_model, index = build_index(data)
rag_pipeline = load_rag_model()

query = st.text_input("Ask a question about Netflix content (2023):")
k = st.slider("Top K similar documents", 1, 10, 3)

if st.button("Generate Insight") and query:
    ask_question_rag_generate(query, k, data, index, bert_model, rag_pipeline)